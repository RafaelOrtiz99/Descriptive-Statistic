help(lm)
?sum
#Instalar librerias
install.packages("tidyverse", dep = TRUE)
#Cargar paquete y sus dependencias
library(tidyverse)
install.packages("magic", dep = T)
library(magic)
magic(6)
#Paquetes instalados
installed.packages()
1+1
#Raíz cuadrada
sqrt(9)
#Exponente
exp(5)
#Logaritmo en base
log(5,2)
#Omitir simbolo
abs(-5)
#Factorial
factorial(7)
#Factorial
factorial(5)
#Coeficiente binomial
choose(5,7)
#Coeficiente binomial
choose(11,7)
cos(60)
cos(60*pi/180)
sqrt(2)
sqrt(2)
print(10, sqrt(2))
print(sqrt(2), 10)
print(sqrt(2), 20)
round(sqrt(2), 3)
sqrt(2)
print(sqrt(2), 10)
round(sqrt(2), 3)
floor(sqrt(2))
sqrt(2)
ceiling(sqrt(2))
?round
pi^2/2
(pi^2)/2
x = (pi^2)/2
y <- cos(pi/4)
sin(pi/4) + cos(pi/4)
sin(pi/4) + cos(pi/4) -> z
function(x){
x**
}-> my_function
function1 <- function(x){
x**
}
function1 <- function(x){
x*2
}
View(function1)
View(function1)
function1(2)
function(x){
x*4
}->function2
function(x){
x*4
}->function2
function(x){
x*4
}->function2
function(x){
x*4
}->function2
doble <- function(x){
x*2
}
rm(function1())
rm(function1
)
#Función f(x) = x³ - 3^x * sen(x)
f <- function(x){
(x^3) - (3^x) * sen(x)
}
f(4)
#Función f(x) = x³ - 3^x * sen(x)
f <- function(x){
(x^3) - (3^x) * sin(x)
}
f(4)
f(4)
#Función f(x) = x³ - 3^x * sen(x)
f <- function(x){
x^3 - (3^x) * sin(x)
}
f(4)
#Función f(x) = x³ - 3^x * sen(x)
f <- function(x){
(x^3) - (3*x) * sin(x)
}
f(4)
#Función f(x) = x³ - 3^x * sen(x)
f <- function(x){
(x^3) - (3^x) * sin(x)
}
f(4)
product <- function(x, y){
x * y
}
product(4,5)
product <- function(x, y){
x * y
x+y
}
product(4,5)
product <- function(x, y){
x * y
}
#Listar variables
ls()
#eliminar variables
rm(product)
ls
ls()
#borrar todo
rm(list = ls())
#Función para sumar 2 números
suma <- function(num1, num2){
num1 + num2
}
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
num1 + num2
}
rm(suma)
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
print(num1 + num2)
print(num1 - num2)
print(num1 * num2)
print(num1 / num2)
#Cociente
print(num1 %/% num2)
#Resto
print(num1 %% num2)
}
operacionesBasicas(6, 4)
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
print("Suma;" num1 + num2)
print(num1 - num2)
print(num1 * num2)
print(num1 / num2)
#Cociente
print(num1 %/% num2)
#Residuo
print(num1 %% num2)
}
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
print("Suma:"+num1 + num2)
print(num1 - num2)
print(num1 * num2)
print(num1 / num2)
#Cociente
print(num1 %/% num2)
#Residuo
print(num1 %% num2)
}
operacionesBasicas(6, 4)
print(paste(sprintf("%i - %i = ", num1 - num2 )num1 - num2))
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
print(num1 + num2)
print(paste(sprintf("%i - %i = ", num1,num2), num1 - num2))
print(num1 * num2)
print(num1 / num2)
#Cociente
print(num1 %/% num2)
#Residuo
print(num1 %% num2)
}
operacionesBasicas(6, 4)
#Función de operaciones básicas
operacionesBasicas <- function(num1, num2){
print("Suma",num1 + num2)
print(paste(sprintf("%i - %i = ", num1,num2), num1 - num2))
print(num1 * num2)
print(num1 / num2)
#Cociente
print(num1 %/% num2)
#Residuo
print(num1 %% num2)
}
operacionesBasicas(6, 4)
#Números complejos = a+bi, complex(modulus, argument)
3+2i
class(3+2i)
e(5)
exp(5)
exp()
exp(1)
#Función ax+b=0
funcion <- function(a,b){
#a * x + b = 0
x <- -b/a
x
}
funcion(2,4)
funcion(7,4)
funcion(5,3)
#Función ax+b=0
funcion <- function(a,b, result){
#a * x + b = 0
x <- (result - b) / a
x
}
funcion(5,3, 18)
funcion(7, 4, 18)
#Punto 2
funcion <- function(a,b, result){
(result - b) / a
}
funcion(7, 4, 18)
#Punto 2
funcion <- function(a,b, result = 0){
(result - b) / a
}
funcion(7, 4)
funcion(2, 4)
funcion(7, 4, 18)
funcion(1, 1, 1)
#Punto 3, 3e-π
(3 * e) - pi
#Punto 3, 3e-π
(3 * exp(1)) - pi
#Punto 3, 3e-π
round((3 * exp(1)) - pi, 3)
#Punto 4,  módulo de (2+3i)^2/(5+8i)
(2+3i)^2 / (5+8i)
#Punto 4,  módulo de (2+3i)^2/(5+8i)
abs((2+3i)^2 / (5+8i))
#Punto 4,  módulo de (2+3i)^2/(5+8i)
(2+3i)^2 %% (5+8i)
#Punto 4,  módulo de (2+3i)^2/(5+8i)
((2+3i)^2) %% (5+8i)
#Punto 4,  módulo de (2+3i)^2/(5+8i)
(2+3i) %% (5+8i)
#Punto 4,  módulo de (2+3i)^2/(5+8i)
round((2+3i)^2 %% (5+8i), 3)
funcion(1, 1, 1)
